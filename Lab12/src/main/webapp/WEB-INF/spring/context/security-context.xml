<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">

	<!-- enable Method level [vs URL level] authorization This work for APPLICATION 
		Level scanned components Does NOT recognize WEB level components - for THAT 
		need to place enable line in Dispatcher-servlet -->
	<security:global-method-security
		pre-post-annotations="enabled" />
	<!-- Use ControllerAdice for Access denied -->
	<!-- security:http enables security filter mechanism...name space configuration 
		is activated -->
	<!-- use-expressions enables URL level authorization -->
	<security:http use-expressions="true">
		<security:port-mappings>
			<security:port-mapping http="8080" https="8443" />
		</security:port-mappings>

		<!-- We will just use web.xml error -->
		<!-- Other Options to redirect exception for web authorization -->
		<!-- <security:access-denied-handler error-page="/error-forbidden" /> <security:access-denied-handler 
			ref="controllerExceptionHandler" /> -->

		<!-- Implemented with Web based URL - Controller "METHOD" level authorization -->
		<!-- the more specific rules need to come first, followed by the more general 
			ones. -->
		<!-- COMmENT out the following to see @Service METHOD level authorization -->
		<security:intercept-url pattern="/members/add"
			access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/members"
			access="hasAnyRole('ROLE_ADMIN','ROLE_USER')" />
		<security:intercept-url pattern="/employees/add"
			access="hasRole('ROLE_ADMIN')" />

		<security:logout logout-success-url="/employees"
			logout-url="/doLogout" />

		<security:form-login />

		<!-- BY DEFAULT the URL /j_spring_security_logout triggers logout NOTE: 
			is it JUST a URL naming convention - no mapping is required logout-url= "/doLogout" 
			REPLACES it -->
	</security:http>


	<security:authentication-manager>
		<security:authentication-provider>
			<security:password-encoder hash="bcrypt" />
			<security:jdbc-user-service
				data-source-ref="dataSource"
				users-by-username-query="select username,password,enabled from users where username=?"
				authorities-by-username-query="select u1.username, u2.authority from users u1, authorities u2 where u1.username = u2.username and u1.username =?" />
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
